#include <stdio.h>
#include <stdlib.h>

#define DISK_SIZE 100
#define MAX_FILES 10

int disk[DISK_SIZE] = {0};  // 0 = free, 1 = allocated

// File table to store metadata of each file
int fileStart[MAX_FILES];
int fileLength[MAX_FILES];
int fileCount = 0;

// Allocate file
void allocateFile(int start, int length) {
    if (fileCount >= MAX_FILES) {
        printf("Error: File table is full.\n");
        return;
    }

    // Check if space is within disk bounds
    if (start < 0 || start + length > DISK_SIZE) {
        printf("Error: File exceeds disk boundaries.\n");
        return;
    }

    // Check if all required blocks are free
    for (int i = start; i < start + length; i++) {
        if (disk[i] == 1) {
            printf("Error: Block %d is already allocated.\n", i);
            return;
        }
    }

    // Allocate the blocks
    for (int i = start; i < start + length; i++) {
        disk[i] = 1;
    }

    // Save file metadata
    fileStart[fileCount] = start;
    fileLength[fileCount] = length;
    printf("File %d allocated from block %d to block %d.\n", fileCount + 1, start, start + length - 1);
    fileCount++;
}

// Show disk status
void displayDisk() {
    printf("\nDisk blocks (0 = Free, 1 = Allocated):\n");
    for (int i = 0; i < DISK_SIZE; i++) {
        printf("%d", disk[i]);
        if ((i + 1) % 20 == 0) printf("\n");
    }
}

// Show file allocation table
void displayFileTable() {
    printf("\nFile Allocation Table:\n");
    printf("File\tStart\tLength\n");
    for (int i = 0; i < fileCount; i++) {
        printf("%d\t%d\t%d\n", i + 1, fileStart[i], fileLength[i]);
    }
}

int main() {
    int choice, start, length;

    while (1) {
        printf("\n--- Sequential File Allocation Menu ---\n");
        printf("1. Allocate File\n");
        printf("2. Display Disk\n");
        printf("3. Display File Table\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter starting block and length: ");
                scanf("%d %d", &start, &length);
                allocateFile(start, length);
                break;
            case 2:
                displayDisk();
                break;
            case 3:
                displayFileTable();
                break;
            case 4:
                exit(0);
            default:
                printf("Invalid choice.\n");
        }
    }

    return 0;
}
