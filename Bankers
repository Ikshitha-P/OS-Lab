#include <stdio.h>
#include <stdbool.h>

#define MAX 10

int main() {
    int n, m;
    int alloc[MAX][MAX], max[MAX][MAX], need[MAX][MAX];
    int avail[MAX];
    int completed[MAX] = {0};
    int safeSeq[MAX], work[MAX];
    int count = 0;

    // Input number of processes and resources
    printf("Enter number of processes: ");
    scanf("%d", &n);
    printf("Enter number of resources: ");
    scanf("%d", &m);

    // Input Allocation and Max matrices
    for (int i = 0; i < n; i++) {
        printf("Enter details for P%d\n", i);
        printf("Enter allocation -- ");
        for (int j = 0; j < m; j++) {
            scanf("%d", &alloc[i][j]);
        }
        printf("Enter Max -- ");
        for (int j = 0; j < m; j++) {
            scanf("%d", &max[i][j]);
            need[i][j] = max[i][j] - alloc[i][j];
        }
    }

    // Input Available Resources
    printf("Enter Available Resources -- ");
    for (int i = 0; i < m; i++) {
        scanf("%d", &avail[i]);
        work[i] = avail[i];
    }

    // Check Safe Sequence
    while (count < n) {
        bool found = false;
        for (int i = 0; i < n; i++) {
            if (!completed[i]) {
                bool canProceed = true;
                for (int j = 0; j < m; j++) {
                    if (need[i][j] > work[j]) {
                        canProceed = false;
                        break;
                    }
                }

                if (canProceed) {
                    printf("P%d is visited (", i);
                    for (int j = 0; j < m; j++) {
                        work[j] += alloc[i][j];
                        printf("%d ", work[j]);
                    }
                    printf(")\n");

                    completed[i] = 1;
                    safeSeq[count++] = i;
                    found = true;
                }
            }
        }
        if (!found) break;
    }

    if (count == n) {
        printf("SYSTEM IS IN SAFE STATE\n");
        printf("The Safe Sequence is -- ");
        for (int i = 0; i < n; i++) {
            printf("P%d ", safeSeq[i]);
        }
        printf("\n");

        // Display table
        printf("\nProcess    Allocation    Max    Need\n");
        for (int i = 0; i < n; i++) {
            printf("P%d\t", i);
            for (int j = 0; j < m; j++) printf("%d ", alloc[i][j]);
            printf("\t   ");
            for (int j = 0; j < m; j++) printf("%d ", max[i][j]);
            printf("\t");
            for (int j = 0; j < m; j++) printf("%d ", need[i][j]);
            printf("\n");
        }

    } else {
        printf("SYSTEM IS NOT IN SAFE STATE\n");
    }

    // Optional Request
    int req[MAX], pid;
    printf("\nEnter New Request Details --\nEnter pid -- ");
    scanf("%d", &pid);
    printf("Enter Request for Resources -- ");
    for (int i = 0; i < m; i++) scanf("%d", &req[i]);

    bool canGrant = true;
    for (int i = 0; i < m; i++) {
        if (req[i] > need[pid][i] || req[i] > avail[i]) {
            canGrant = false;
            break;
        }
    }

    if (canGrant) {
        for (int i = 0; i < m; i++) {
            avail[i] -= req[i];
            alloc[pid][i] += req[i];
            need[pid][i] -= req[i];
        }

        printf("Request can be granted.\n");
    } else {
        printf("Request CANNOT be granted.\n");
    }

    return 0;
}
